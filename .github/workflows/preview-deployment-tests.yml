name: Preview Deployment Tests

on:
  pull_request:
    branches: [ main, develop ]
  deployment_status:
    # Run tests when Vercel deployment is ready
    # This ensures we test against the actual preview URL
  push:
    branches: [ main ]

jobs:
  preview-tests:
    name: Run Preview Deployment Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    # Only run on successful deployments or PR events
    if: github.event_name == 'pull_request' || (github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Extract deployment URL from GitHub event
        id: deployment-url
        run: |
          if [ "${{ github.event_name }}" == "deployment_status" ]; then
            echo "DEPLOYMENT_URL=${{ github.event.deployment_status.target_url }}" >> $GITHUB_ENV
            echo "VERCEL_URL=$(echo ${{ github.event.deployment_status.target_url }} | sed 's|https://||')" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PR events, we might need to wait for deployment or use a different approach
            echo "Using PR-based testing approach"
            # You might want to add logic here to wait for deployment or use a different URL
          fi
        
      - name: Wait for deployment to be ready
        if: env.DEPLOYMENT_URL
        run: |
          echo "Waiting for deployment to be ready at: ${{ env.DEPLOYMENT_URL }}"
          timeout 300 bash -c 'until curl -s ${{ env.DEPLOYMENT_URL }} > /dev/null; do echo "Waiting for deployment..."; sleep 10; done'
        
      - name: Run Preview Deployment Tests
        run: npm run test:preview:ci
        env:
          CI: true
          VERCEL_URL: ${{ env.VERCEL_URL }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          
      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-screenshots
          path: test-results/
          retention-days: 30
          
      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check if test results exist and create a comment
            const testResultsPath = 'test-results';
            const reportPath = 'playwright-report';
            
            let comment = '## 🎭 Preview Deployment Test Results\n\n';
            
            if (process.env.VERCEL_URL) {
              comment += `**Tested against:** https://${process.env.VERCEL_URL}\n\n`;
            }
            
            // Add test status based on job outcome
            if (process.env.GITHUB_JOB_STATUS === 'success') {
              comment += '✅ **All tests passed!**\n\n';
              comment += '- Homepage loads correctly (200 status)\n';
              comment += '- Docs subdomain rewrite works\n';
              comment += '- Cross-domain navigation functions\n';
              comment += '- Mobile viewport snapshots captured for all 5 themes\n';
            } else {
              comment += '❌ **Some tests failed**\n\n';
              comment += 'Please check the test report for details.\n';
            }
            
            comment += '\n📊 [View detailed test report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
  # Separate job for local development testing
  local-tests:
    name: Run Local Development Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    # Only run on PR events when no deployment URL is available
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: npm start &
        
      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do echo "Waiting for app..."; sleep 2; done'
        
      - name: Run Preview Deployment Tests (Local)
        run: npm run test:preview:ci
        env:
          CI: true
          BASE_URL: http://localhost:3000
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-local
          path: playwright-report/
          retention-days: 30
